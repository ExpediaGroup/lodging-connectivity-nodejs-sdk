/*
 * Copyright (C) 2024 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  ApolloClient,
  HttpLink,
  InMemoryCache,
  MutationOptions,
  NormalizedCacheObject,
  OperationVariables,
  QueryOptions
} from '@apollo/client/core';

import { ClientConfigurations } from '../../core/client/Client';
import { ExpediaGroupServiceError } from '../../core/model/error/service/ExpediaGroupServiceError';
import { ApolloAxiosClient } from './ApolloAxiosClient';

export abstract class BaseGraphQLClient {
  private readonly apolloAxiosClient: ApolloAxiosClient;
  private readonly clientConfiguration: ClientConfigurations;
  private readonly apolloClient: ApolloClient<NormalizedCacheObject>;

  protected constructor(clientConfig: ClientConfigurations) {
    this.clientConfiguration = clientConfig;
    this.apolloAxiosClient = new ApolloAxiosClient(clientConfig);
    this.apolloClient = this.initializeApolloClient();
  }

  public async query<T, V extends OperationVariables>(options: QueryOptions<V, T>): Promise<T> {
    const response = await this.apolloClient.query<T, V>(options);

    if (response.error) {
      throw new ExpediaGroupServiceError(JSON.stringify(response.error));
    }

    if (response.errors) {
      throw new ExpediaGroupServiceError(JSON.stringify(response.errors));
    }

    return response.data;
  }

  public async mutate<T, V extends OperationVariables>(options: MutationOptions<T, V>): Promise<T> {
    const { data, errors } = await this.apolloClient.mutate(options);

    if (errors) {
      throw new ExpediaGroupServiceError(JSON.stringify(errors));
    }

    if (!data) {
      throw new ExpediaGroupServiceError('Something went wrong!');
    }

    return data;
  }

  private initializeApolloClient() {
    return new ApolloClient({
      uri: this.clientConfiguration.endpoint,
      cache: new InMemoryCache(),
      link: new HttpLink({
        uri: this.clientConfiguration.endpoint,
        fetch: this.apolloAxiosClient.fetch.bind(this.apolloAxiosClient)
      })
    });
  }
}
